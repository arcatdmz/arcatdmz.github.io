extends ../_layout

block vars
  - p = projectsTable['f3js'];
  - title = p.getTitle(lang);
  - me = p.project + '/';

block main
  +render-project-header('f3js')
  .ui.hidden.divider
  section#abstract
    h2.ui.header
      .content #{en ? 'Abstract' : '概要'}
    .ui.basic.segment
      block abstract
        p Although the exploration of design alternatives is crucial for interaction designers and customization is required for end-users, the current development tools for physical computing devices have focused on single versions of an artifact.
        p We propose the parametric design of devices including their enclosure layouts and programs to address this issue. A Web-based design tool called f3.js is presented as an example implementation, which allows devices assembled from laser-cut panels with sensors and actuator modules to be parametrically created and customized.
        p It enables interaction designers to write code with dedicated APIs, declare parameters, and interactively tune them to produce the enclosure layouts and programs. It also provides a separate user interface for end-users that allows parameter tuning and dynamically generates instructions for device assembly. The parametric design approach and the tool were evaluated through two user studies with interaction designers, university students, and end-users.
    .ui.hidden.divider
  section#presentations
    h2.ui.header #{en ? 'Presentation materials' : '発表内容'}
    .ui.basic.segment
      .ui.stackable.two.columns.grid
        .column
          h3.ui.header DIS 2017 #{en ? 'Demo Video' : 'デモ動画'}
          +embed-youtube('//www.youtube.com/embed/BwPXXjfUUVw')
          .caption: .ui.horizontal.list
            .item
              a(href='//www.youtube.com/watch?v=BwPXXjfUUVw')
                i.youtube.icon
                | YouTube
        .column
          h3.ui.header DIS 2017 #{en ? 'Slides' : '発表スライド'}
          .ui.embed(data-url=publicationsTable[p.publication].entryTags.slides, data-placeholder=`${rootPath}images/background-eee.png`, data-icon='video play outline')
          .caption: .ui.horizontal.list
            .item
              a(href=publicationsTable[p.publication].entryTags.slides)
                i.download.icon
                | #{en ? 'Download' : 'ダウンロード'}
          - if (!en) {
          p.caption 日本語の発表スライドは
            a(href='#publications')
              i.book.icon
              | 発表文献
            | で日本語文献の 
            i.sidebar.fitted.icon
            |  をクリックすると閲覧できます。
          - }
  .ui.hidden.divider
  section#concept
    h2.ui.header #{en ? 'Core concept: parametric design of devices' : '核となるアイデア: IoTデバイスのパラメトリックデザイン'}
    .ui.basic.segment
      .ui.stackable.two.columns.grid
        .column
          h3.ui.header
            - if (en) {
            | Parametric Design for Interaction Designers
            - } else {
            | インタラクションデザイナ向けの特長
            .sub.header ハードとソフトの一体開発
            - }
          a.ui.fluid.image(href=`${rootPath}f3js/f3js-programmers.png`)
            img(src=`${rootPath}f3js/f3js-programmers.png`)
          .caption: block designer
            p A physical computing device is a combination of hardware (a device enclosure with sensor and actuator modules) and software (a program that drives the modules), both of which are usually designed with different tools&mdash;CAD tools for the former and IDEs for the latter.
            p This separation might work well in creating a single artifact of the device, but it is cumbersome to create and manage multiple variations of the device with different enclosure shapes and program features. Exploring design alternatives involves numerous iterations of splitting and merging the two independent workflows. For instance, testing different numbers of buttons in a device requires operations with both tools.
            p With the proposed <strong>code-centric development process</strong> of f3.js in which every aspect of a physical computing device is defined in a single codebase, parametric design of devices is as easy as defining a variable in the code and tweaking its value with intuitive <strong>lightweight GUI widgets</strong>.
            p In addition, f3.js provides <strong>GUI-like APIs for hardware layouts and software</strong>. For instance, <code>var rect = f3js.drawRectangle(0, 0, 100, 30)</code> cuts out a 100-by-30 mm rectangle, <code>var planes = rect.extrude(40)</code> produces five additional panels that together form a box shape, and <code>f3js.add(new GroveButton(1))</code> opens holes for holding a button module. Furthermore, the <strong>layout manager API</strong> helps creating physical user interfaces that follow existing design patterns.
          .ui.hidden.divider
          .ui.stackable.two.columns.grid
            .column
              a.ui.fluid.image(href=`${rootPath}f3js/extrusion-without-opposite-plane.jpg`)
                img(src=`${rootPath}f3js/extrusion-without-opposite-plane-resized.jpg`)
              p.caption #{en ? 'Extruding a rectangle makes a box.' : '矩形を押し出すと箱型ができる。'}
              .ui.hidden.divider
            .column
              a.ui.fluid.image(href=`${rootPath}f3js/circle-layout.jpg`)
                img(src=`${rootPath}f3js/circle-layout-resized.jpg`)
              - if (en) {
              p.caption Circular layout is common in physical user interfaces.
              p Other figures showing the API usage and design patterns include: 
                a(href=`${rootPath}f3js/partial-extrusion.jpg`) partial extrusion
                |  and  
                a(href=`${rootPath}f3js/line-layout.jpg`) line layout
                | .
              - } else {
              p.caption モジュールが円形に並ぶデザインは多くのIoTデバイスで見られる。他に
                a(href=`${rootPath}f3js/partial-extrusion.jpg`) 押し出し操作の別例
                | と
                a(href=`${rootPath}f3js/line-layout.jpg`) モジュールが線上に並ぶデザイン
                | の図がある。いずれもf3.jsのAPIで容易に設計できる形状である。
              - }
              .ui.hidden.divider
        .column
          h3.ui.header
            - if (en) {
            | Parametric Design for End-uesrs
            - } else {
            | エンドユーザ向けの特長
            .sub.header プラモデルのようなデバイス組み立て
            - }
          a.ui.fluid.image(href=`${rootPath}f3js/f3js-end-users.png`): img(src=`${rootPath}f3js/f3js-end-users.png`)
          .caption: block end-user
            p The f3.js design tool enables customization, printing, and the use of devices without prior knowledge by providing lightweight GUI widgets for customization and detailed instructions on building of devices. Building physical prototypes that perfectly match the need is <i>&quot;as easy as assembling a plastic model kit&quot;</i> with f3.js (quoted from a user study).
            .ui.right.floated.small.image
              a(href=`${rootPath}f3js/design-alternatives-shapes.jpg`)
                img(src=`${rootPath}f3js/design-alternatives-shapes-resized.jpg`)
              p.caption Creating devices with alternative designs is as easy as tweaking sliders in f3.js.
            p Users first search for existing projects. Once an interesting project is found, a project page displays its details when it is accessed. The page provides lightweight GUI widgets that allow users to interactively explore device variations. Tweaking parameters with the widgets silently updates variable declarations in the codebase, and the print preview is consequently updated.
            p There are detailed instructions on which sensor and actuator modules to purchase below the print preview. The list is dynamically generated simultaneously as the print preview is updated by aggregating the type and number of modules used in the project.
            p Next to the list of modules is a link to download PDF files that can be directly sent to the laser cutter. It provides the option of printing labels near adjacent edges. Joint lines between different planes have unique shapes that do not match with wrong edges. These features help the user to assemble the panels without confusion.
            p The final step is to install and run a program on the target platform. f3.js archives each project in TAR or ZIP format whose content can be directly executed on the target. A single command-line tool (<code>f3-projects</code>) can be used to download, transfer, extract, install dependencies, and launch a daemon that continuously runs the program.
          .ui.hidden.divider
  section#examples
    h2.ui.header #{en ? 'Example applications' : 'アプリケーション例'}
    .ui.basic.segment
      .ui.stackable.two.columns.grid
        .column
          h3.ui.header #{en ? 'Videos of 17 applications' : '17個の作例動画'}
          +embed-youtube('https://www.youtube.com/embed/videoseries?list=PLb6OjFoBksmvYwbJqt8Z30LS72LkPrPJb')
          .caption: block example-videos
            p We conducted two user studies in different stages of developing f3.js. This playlist contains seventeen example applications created through the studies.
            p The first study was conducted to validate its potential and to assess its limitations by collecting a variety of applications that could be made with f3.js. The second study was conducted after revisions to check if the tool could help both interaction designers and end-users to explore variations in devices.
          .ui.hidden.divider
        .column
          h3.ui.header #{en ? 'Explanations on the first 5 apps' : '冒頭5例の紹介'}
          .ui.basic.segment: block examples
            ol(type='a')
              li <strong>QuadBuzzer</strong> is a musical instrument with one to four buzzers. It is connected to a host PC and creates sound according to user operations on the host. The enclosure is centrosymmetrical with curves and the buzzers are placed with the Circle layout. 
              li <strong>Music Kiosk</strong> plays musical melodies in synchronicity with another computer that is playing a music video uploaded to YouTube. The device enclosure uses the Line layout to place four equally-spaced LEDs in line.
              li <strong>Card Matching Game</strong> allows a user to choose a number of players from one or two and changes the number of printed controllers, as well as the available game modes. 
              li <strong>Rhythm Game on a Drum</strong> is an interactive game that utilizes a sound sensor to detect a hit on the drum, which is made of a hand-crafted case.
              li <strong>Translator</strong> is an arm-mounted device that uses a Web-based translation API to translate text captured by a camera and presents the results on its LCD.
            p There are more interesting applications in the playlist, so please do not miss them.
          .ui.hidden.divider
  section#news
    h2.ui.header
      i.announcement.icon
      .content #{en ? 'News' : 'ニュース'}
    .ui.basic.segment: .ui.divided.feed
      block news
        .event: .content
          .date 6/14/2017
          .summary f3.js was presented at ACM DIS 2017 and is available on the web at 
            a(href='http://f3js.org') f3js.org
            | . Please try it out!
  .ui.hidden.divider
  +render-project-publications('f3js', 'dis2017-kato-f3js')
