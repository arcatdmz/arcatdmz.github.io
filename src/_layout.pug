- function getItemClass(path) {
-   return me === path ? 'active' : undefined;
- }

mixin head()
  meta(charset='utf-8')
  meta(name='viewport', content='width=device-width, initial-scale=1.0')
  meta(name='description', content='')
  meta(property='fb:admins', content='503220390')
  block meta
    meta(name='author', content=author)
    title #{title} | junkato.jp
  link(rev='made', href='mailto:i@junkato.jp')
  link(rel='stylesheet', href='//fonts.googleapis.com/css?family=Fira+Sans')
  - if (!en) {
  link(rel='stylesheet', href='//fonts.googleapis.com/earlyaccess/notosansjapanese.css')
  - }
  link(rel='stylesheet', href='/stylesheets/main.css')
  block head

mixin sidebar()
  a.item(href=`${basePath}`, class=getItemClass(''))
    img.ui.avatar.image(src='/images/junkato.jpg')
    | #{en ? 'Top page' : 'トップ'}
  a.item(href=`${basePath}#contact`)
    i.address.card.icon
    | #{en ? 'Contact' : '連絡先'}
  block projects-sidebar-menu
    .ui.item(href=`${basePath}#projects`)
      i.lab.icon
      | #{en ? 'Projects' : 'プロジェクト'}
      .menu
        a.item(href=`${basePath}#projects`) #{en ? 'List of projects' : 'プロジェクト一覧'}
        .ui.divider
        - for (const p of recentProjects) {
        a.item(href=basePath + p.project)
          - if (p.icon) {
          img.ui.avatar.image(src=`/images/icons/${p.icon}`)
          - }
          | !{p.getTitle(lang)}
        - }
        .ui.divider
        a.item(href=`${basePath}#previous-projects`) #{en ? 'Previous projects' : '以前のプロジェクト'}
        a.item(href=`${basePath}#private-projects`) #{en ? 'Private projects' : '趣味プロジェクト'}
  a.item(href=`${basePath}publications`, class=getItemClass('publications/'))
    i.text.file.icon
    | #{en ? 'Publications' : '発表文献'}
  a.item(href=`${basePath}design`, class=getItemClass('design/'))
    i.paint.brush.fitted.icon
    | #{en ? 'Design' : 'デザイン'}
  a.item(href=`${basePath}activities`, class=getItemClass('activities/'))
    i.student.icon
    | #{en ? 'Activities' : '職務活動'}
  a.item(href=`${basePath}timeline`, class=getItemClass('timeline/'))
    i.history.icon
    | #{en ? 'Timeline' : '活動履歴'}
  a.item(href=`${basePath}collaborations`, class=getItemClass('collaborations/'))
    i.handshake.icon
    | #{en ? 'Collaborations' : '共同研究'}
  - if (!en) {
  a.item(href='/ja/blog')
    i.wordpress.icon
    | ブログ
  - }

mixin header()
  .ui.top.fixed.menu#fixed-menu
    a.item(href=basePath, class=getItemClass(''))
      span.mobile.hidden #{author}
      span.print-hidden.mobile.only: i.user.icon
    a.mobile.hidden.item(href=`${basePath}#contact`)
      i.address.card.fitted.icon
      span.print-hidden.tablet.or.lower.hidden #{en ? 'Contact' : '連絡先'}
    block projects-header-menu
      .ui.dropdown.mobile.hidden.item(href=`${basePath}#projects`)
        i.lab.fitted.icon
        span.print-hidden.tablet.or.lower.hidden #{en ? 'Projects' : 'プロジェクト'}
        .menu
          a.item(href=`${basePath}#projects`) #{en ? 'List of projects' : 'プロジェクト一覧'}
          .ui.divider
          - for (const p of projects) {
          - if (recentProjects.indexOf(p) < 0) continue;
          //- - if (p.category === 'committee' || p.category === 'private') continue;
          //- - if ((p.year.to || p.year.from) < 2012) continue;
          a.item(href=basePath + p.project) !{p.getTitle(lang)}
          - }
          .ui.divider
          a.item(href=`${basePath}#previous-projects`) #{en ? 'Previous projects' : '以前のプロジェクト'}
          a.item(href=`${basePath}#private-projects`) #{en ? 'Private projects' : '趣味プロジェクト'}
    a.mobile.hidden.item(href=`${basePath}publications`, class=getItemClass('publications/'))
      i.text.file.fitted.icon
      span.print-hidden.tablet.or.lower.hidden #{en ? 'Publications' : '発表文献'}
    a.mobile.hidden.item(href=`${basePath}design`, class=getItemClass('design/'))
      i.paint.brush.fitted.icon
      span.print-hidden(class = en ? 'tablet or lower hidden' : 'computer or lower hidden') #{en ? 'Design' : 'デザイン'}
    a.mobile.hidden.item(href=`${basePath}activities`, class=getItemClass('activities/'))
      i.student.fitted.icon
      span.print-hidden(class = en ? 'tablet or lower hidden' : 'computer or lower hidden') #{en ? 'Activities' : '職務活動'}
    a.mobile.hidden.item(href=`${basePath}timeline`, class=getItemClass('timeline/'))
      i.history.fitted.icon
      span.print-hidden.computer.or.lower.hidden #{en ? 'Timeline' : '活動履歴'}
    a.mobile.hidden.item(href=`${basePath}collaborations`, class=getItemClass('collaborations/'))
      i.handshake.fitted.icon
      span.print-hidden.computer.or.lower.hidden #{en ? 'Collaborations' : '共同研究'}
    .right.menu
      +right-header-menu()

mixin right-header-menu()
  - if (en) {
  a.item(href=`/ja/${me}`)
    i.translate.fitted.icon
    span.print-hidden 日本語
  - } else {
  a.item(href='/ja/blog')
    i.wordpress.fitted.icon
    span.print-hidden.mobile.hidden ブログ
  a.item(href=`/${me}`)
    i.translate.fitted.icon
    span.print-hidden English
  - }
  a.item.print-hidden.sidebar-button(href='#')
    i.sidebar.fitted.icon
    | #{en ? 'Menu' : 'メニュー'}

mixin footer()
  footer.ui.center.aligned.basic.segment
    .ui.container
      .ui.divider
      p &copy; 
        a(href=`${basePath}#contact`) Jun Kato
        |  2018

mixin embed-youtube(src)
  .ui.embed: iframe(src=src, frameborder='0', allow='autoplay; encrypted-media', allowfullscreen)

mixin render-project-header(project)
  - const p = projectsTable[project]
  section
    h1.ui.header !{title}
      .sub.header #{p.getSubtitle(lang)}
    .ui.horizontal.divided.list
      - if (p.hasMembers()) for (member of p.getMembers(lang)) {
      .item #{member}
      - }
      .item
        span.ui.tiny.basic.label
          i.calendar.icon
          | #{p.getYearString(lang)}
      - if (p.hasPublication(lang)) {
      - const pub = publicationsTable[p.getPublication(lang)];
      .item
        span.ui.green.tiny.basic.label
          i.student.icon
          | !{pub ? pub.getSeriesTag() : 'undefined'}
      - }
      - const tags = p.getTags(lang);
      - if (tags.length > 0) {
      .item #{en ? 'Keywords' : '関連キーワード'}: !{tags.join(', ')}
      - }

mixin render-project-publications(project, majorPublication)
  section#publications
    h2.ui.header
      i.book.icon
      .content #{en ? 'Publications' : '発表文献'}
    - if (majorPublication) {
    +render-project-publications-with-major(project, majorPublication)
    - } else {
    .ui.segment: .ui.divided.list
      - for (const entry of publications) {
      - if (en && entry.entryTags && entry.entryTags.language === 'japanese') continue; // skip Japanese publications
      - if (!entry.entryTags || !entry.entryTags.project || entry.entryTags.project.indexOf(project) < 0) continue;
      +render-publication(entry, false, false)
      - }
    - }

mixin render-project-publications-with-major(project, majorPublication)
  - const projectPublications = [];
  - for (const entry of publications) {
  - if (entry.citationKey === majorPublication) continue;
  - if (en && entry.entryTags && entry.entryTags.language === 'japanese') continue; // skip Japanese publications
  - if (!entry.entryTags || !entry.entryTags.project || entry.entryTags.project.indexOf(project) < 0) continue;
  - projectPublications.push(entry);
  - }
  .ui.basic.segment
    .ui.raised.segment.major-publication
      span.ui.red.ribbon.label #{en ? 'Cite this!' : '引用するならコレ！'}
      +render-major-publication(publicationsTable[majorPublication], false, false)
    - if (projectPublications.length > 0) {
    .ui.secondary.segment: .ui.divided.list
      - for (const entry of projectPublications) {
      +render-publication(entry, false, false)
      - }
    - }

mixin render-publication(entry, withIcon=false, withProjectLabel=true)
  - if (!entry.entryTags) return;
  .item.publication(class=entry.entryType, id=entry.citationKey)
    .right.floated.content
      .ui.circular.icon.tiny.with-popup-menu.button
        i.sidebar.icon
      .ui.popup
        .ui.divided.list
          - if (entry.entryTags.pdf) {
          a.item(href=entry.entryTags.pdf)
            i.text.file.icon
            | #{en ? 'Paper PDF' : '論文PDF'}
          - }
          - if (entry.entryTags.poster) {
          a.item(href=entry.entryTags.poster)
            i.image.file.icon
            | #{en ? 'Poster PDF' : 'ポスターPDF'}
          - }
          - if (entry.entryTags.slides) {
          a.item(href=entry.entryTags.slides)
            i.powerpoint.file.outline.icon
            | #{en ? 'Slides PDF' : 'スライドPDF'}
          - }
          - if (entry.hasDOIUrl()) {
          a.item(href=entry.getDOIUrl())
            i.barcode.icon
            | #{en ? 'Resolve DOI' : 'DOIを照会'}
          - }
          a.bibtex.item(data-clipboard-text=entry.getBibTeX(), href='#')
            i.book.icon
            | #{en ? 'Copy BibTeX' : 'BibTeXをコピー'}
    - if (withIcon) {
    i.icon(class=entry.getIconClass())
    - }
    .content
      h4.ui.header #{entry.entryTags.title}
      .description: .ui.list
        .item.labels
          i.right.triangle.icon
          .content 
            span.ui.tiny.label
              i.calendar.icon
              | #{entry.entryTags.year}
            - if (entry.entryTags.series) {
            span.ui.tiny.green.label
              i.student.icon
              | #{entry.entryTags.series}
            - }
            - if (entry.entryTags.addition) {
            span.ui.tiny.red.label
              i.trophy.icon
              | #{entry.entryTags.addition}
            - }
            - if (withProjectLabel) {
            - if (entry.entryTags.project && projectsTable[entry.entryTags.project]) {
            - const p = projectsTable[entry.entryTags.project];
            a.ui.tiny.basic.red.label(href=basePath + p.project)
              i.lab.icon
              | !{p.getTitle(lang)}
            - }
            - }
        .item.authors
          i.users.icon
          .content
            | !{entry.getAuthorsTags().join(', ')}
            - if (entry.entryTags.editor) {
            |  (Eds. !{entry.getEditorsTags().join(', ')})
            - }
        .item.book
          i.book.icon
          .content #{entry.getBookWithPages()}

mixin render-major-publication(entry)
  span.labels
    span.ui.label
      i.calendar.icon
      | #{entry.entryTags.year}
    - if (entry.entryTags.series) {
    span.ui.green.label
      i.student.icon
      | #{entry.entryTags.series}
    - }
  h4.ui.header #{entry.entryTags.title}
  .ui.list
    .item.authors
      i.users.icon
      .content
        | !{entry.getAuthorsTags().join(', ')}
        - if (entry.entryTags.editor) {
        |  (Eds. !{entry.getEditorsTags().join(', ')})
        - }
    .item.book
      i.book.icon
      .content #{entry.getBookWithPages()}
    - if (entry.entryTags.addition) {
    .item.award
      i.trophy.icon
      .content: strong #{entry.entryTags.addition}
    - }
  .ui.form: .field.bibtex
    label BibTeX:
    textarea(readonly) #{entry.getBibTeX()}
    a.ui.bottom.attached.tiny.bibtex.button(data-clipboard-text=entry.getBibTeX())
      i.copy.icon
      | #{en ? 'Copy to the clipboard' : 'クリップボードにコピー'}

mixin render-project-card(p)
  .card(id=p.project ? `projects-${p.project}` : undefined, data-project=p.project)
    a.image(href=basePath + p.project): img(src=`/images/thumbnails/${p.thumbnail}`)
    .content
      a.header(href=basePath + p.project)
        - if (p.icon) {
        img.ui.avatar.image(src=`/images/icons/${p.icon}`)
        - }
        | !{p.getTitle(lang)}
      .meta !{p.getTags(lang).join('')}
      .description !{p.getDescription(lang)}
    .extra.content
      span.right.floated
        i.calendar.icon
        | #{p.getYearString(lang)}
      - if (p.category !== 'private' && p.category !== 'committee') {
      - if (p.hasPublication(lang)) {
      - const pub = publicationsTable[p.getPublication(lang)];
      span
        i.student.icon
        | !{pub ? pub.getSeriesTag() : 'undefined'}
      - } else {
      span #{en ? '(Work in progress)' : '(文献未発表)'}
      - }
      - }

mixin render-project-item(p)
  .item(id=p.project ? `projects-${p.project}` : undefined, , data-project=p.project)
    a.mobile.hidden.image(href=basePath + p.project): img(src=`/images/thumbnails/${p.thumbnail}`)
    .content
      a.header(href=basePath + p.project)
        - if (p.icon) {
        img.ui.avatar.image.mobile.only(src=`/images/icons/${p.icon}`)
        - }
        | !{p.getTitle(lang)}
      .description !{p.getDescription(lang)}
      .extra
        span.right.floated
          i.calendar.icon
          | #{p.getYearString(lang)}
        - if (p.category !== 'private' && p.category !== 'committee') {
        - if (p.hasPublication(lang)) {
        - const pub = publicationsTable[p.getPublication(lang)];
        span.ui.green.tiny.basic.label
          i.student.icon
          | !{pub ? pub.getSeriesTag() : 'undefined'}
        - } else {
        span #{en ? '(Work in progress)' : '(文献未発表)'}
        - }
        - }
        - if (p.category === 'collaboration') {
        span.ui.tiny.basic.label
          i.handshake.icon
          | #{en ? 'Co-authored' : '共著'}
        - }
        span.meta !{p.getTags(lang).join(' ')}

doctype html
html(lang='ja')
  block lang
    - var en = true, lang = 'en', basePath = '/';
  - var author = en ? 'Jun Kato' : '加藤 淳';
  block vars
    - var me = '';
    - var bodyClass = undefined;
  head
    +head()
  body(class=bodyClass)
    .ui.right.sidebar.inverted.vertical.menu
      +sidebar()
    block header
      +header()
    #pusher.pusher
      #body
        block main-container
          .ui.container#main
            block main
          +footer()
    #post-footer
      block post-footer
    script(src='https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', crossorigin='anonymous')
    script(type='text/javascript') var en=#{en},lang="#{lang}",basePath="#{basePath}";
    block scripts
      script(type='text/javascript', src='/javascripts/views/default.js')
