
- function getItemClass(path) {
-   return me && path.indexOf(me) === 0 ? 'active' : undefined;
- }

mixin embed-youtube(src)
  .ui.embed: iframe(src=src, frameborder='0', allow='autoplay; encrypted-media', allowfullscreen)

mixin translate(path)
  a.ui.red.tag.with-popup.label(href=`https://github.com/arcatdmz/arcatdmz.github.io/blog/main/src/${path}`, data-content='翻訳した内容をリンク先のファイルに反映してPull requestを送っていただけると大変助かります') 翻訳が必要

mixin translate-en(path)
  a.ui.red.tag.with-popup.label(href=`https://github.com/arcatdmz/arcatdmz.github.io/blog/main/src/${path}`, data-content='I would really appreciate if you could translate this content and send a pull request') Translation required

mixin render-share()
  .share
    -
      const URI = `${protocol}://${domain}${basePath}${me}`;
      const encodedURI = encodeURIComponent(URI);
      const hashtag = undefined;
    a.hatena-bookmark-button(href=`https://b.hatena.ne.jp/entry/${protocol==='https'?'s/':''}${domain}${rootPath}${me}`, data-hatena-bookmark-url=URI, data-hatena-bookmark-layout='standard-balloon', data-hatena-bookmark-lang='ja', title='このエントリーをはてなブックマークに追加'): img(src='https://b.st-hatena.com/images/entry-button/button-only@2x.png', alt='このエントリーをはてなブックマークに追加', width='20', height='20', style='border: none;')
    script(type='text/javascript', src='https://b.st-hatena.com/js/bookmark_button.js', charset='utf-8', async='async')
    a.twitter-share-button(href=`https://twitter.com/intent/tweet?url=${encodedURI}`, data-text=title, data-count='horizontal', data-hashtag=hashtag, data-counturl=URI) #{en ? '' : 'ツイート'}
    script.
      window.twttr = (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {};
        if (d.getElementById(id)) return t;
        js = d.createElement(s);
        js.id = id;
        js.src = "https://platform.twitter.com/widgets.js";
        fjs.parentNode.insertBefore(js, fjs);
        t._e = [];
        t.ready = function(f) {
          t._e.push(f);
        };
        return t;
      }(document, "script", "twitter-wjs"));
    .fb-share-button(style='vertical-align: top;', data-href=URI, data-layout='button_count')
    #fb-root
    script.
      (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4&appId=488785607828009";
        fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'facebook-jssdk'));

mixin render-project-hero(project, additionalLabels, heroImage)
  -
    const p = projectsTable[project];
    const backgroundImageUrl = heroImage || `${rootPath}images/heros/${p.hero}`;
  .hero-unit
    .background-wrapper: .background(style=`background-image:url(${backgroundImageUrl})`)
    .ui.container: +render-project-header(project, additionalLabels)

mixin render-project-header(project, additionalLabels)
  -
    const p = projectsTable[project];
    const projectAwards = [];
    for (const pub of publications) {
      if (pub.entryTags
          && pub.entryTags.project && pub.entryTags.project.indexOf(project) >= 0
          && pub.entryTags.addition
          && (!pub.entryTags.language || (!en && pub.entryTags.language === 'japanese'))) {
        projectAwards.push(pub.entryTags.addition);
      }
    }
  section
    h1.ui.header !{title}
      .sub.header !{p.getSubtitle(lang)}
    .ui.horizontal.divided.list.project-meta-list
      - if (p.hasMembers()) for (member of p.getMembers(lang)) {
      .item #{member}
      - }
      .item
        span.ui.tiny.basic.label
          i.calendar.icon
          | #{p.getYearString(lang)}
      - if (p.hasPublication(lang)) {
      .item: +render-project-label(p)
      - }
      - for (const award of projectAwards) {
      .item
        span.ui.red.tiny.basic.label
          - if (award.indexOf('Invited') < 0) {
          i.trophy.icon
          - }
          | #{award}
      - }
      - if (typeof additionalLabels === 'string') {
      - additionalLabels = [additionalLabels];
      - }
      - if (Array.isArray(additionalLabels)) for (additionalLabel of additionalLabels) {
      .item !{additionalLabel}
      - }
      - const tags = p.getTags(lang);
      - for (var i = 0; i < tags.length; i ++) tags[i] = tags[i].replace(/<a class="(.+)" data-tag="(.+)">/, '<a class="$1" data-tag="$2" data-position="bottom center">');
      - if (tags.length > 0) {
      .tags.item #{en ? 'Keywords' : '関連キーワード'}: !{tags.join(', ')}
      - }
    +render-share()

mixin render-project-publications(project, majorPublication)
  section#publications
    h2.ui.header
      i.book.icon
      .content #{en ? 'Publications' : '発表文献'}
    - if (majorPublication) {
    +render-project-publications-with-major(project, majorPublication)
    - } else {
    .ui.segment: .ui.divided.list
      - var pub = 0;
      - for (const entry of publications) {
      - if (en && entry.entryTags && entry.entryTags.language === 'japanese') continue; // skip Japanese publications
      - if (!entry.entryTags || !entry.entryTags.project || entry.entryTags.project.indexOf(project) < 0) continue;
      - pub ++;
      +render-publication(entry, false, false)
      - }
      - if (pub <= 0) {
      .item No publication record found for this project.
      - }
    - }

mixin render-project-publications-with-major(project, majorPublication)
  - const projectPublications = [];
  - for (const entry of publications) {
  - if (entry.citationKey === majorPublication) continue;
  - if (en && entry.entryTags && entry.entryTags.language === 'japanese') continue; // skip Japanese publications
  - if (!entry.entryTags || !entry.entryTags.project || entry.entryTags.project.indexOf(project) < 0) continue;
  - projectPublications.push(entry);
  - }
  .ui.basic.segment
    .ui.raised.segment.major-publication
      span.ui.red.ribbon.label #{en ? 'Cite this!' : '引用するならコレ！'}
      +render-major-publication(publicationsTable[majorPublication], false, false)
    - if (projectPublications.length > 0) {
    .ui.secondary.segment: .ui.divided.list
      - for (const entry of projectPublications) {
      +render-publication(entry, false, false)
      - }
    - }

mixin render-publication(entry, withIcon=false, withProjectLabel=true)
  - if (!entry.entryTags) return;
  .item.publication(class=entry.entryType, id=entry.citationKey)
    .right.floated.content
      .ui.circular.icon.tiny.with-popup-menu.button
        i.sidebar.icon
      .ui.popup
        .ui.divided.list
          - if (entry.entryTags.pdf) {
          a.item(href=entry.entryTags.pdf)
            i.text.file.icon
            | #{en ? 'Paper PDF' : '論文PDF'}
          - }
          - if (entry.entryTags.poster) {
          a.item(href=entry.entryTags.poster)
            i.image.file.icon
            | #{en ? 'Poster PDF' : 'ポスターPDF'}
          - }
          - if (entry.entryTags.slides) {
          a.item(href=entry.entryTags.slides)
            i.powerpoint.file.outline.icon
            | #{en ? 'Slides PDF' : 'スライドPDF'}
          - }
          - if (entry.hasDOIUrl()) {
          a.item(href=entry.getDOIUrl())
            i.barcode.icon
            | #{en ? 'Resolve DOI' : 'DOIを照会'}
          - }
          - if (!entry.hasDOIUrl() && (entry.entryTags.projectsite || entry.entryTags.url)) {
          a.item(href=(entry.entryTags.projectsite || entry.entryTags.url))
            i.barcode.icon
            | #{en ? 'Related link' : '関連リンク'}
          - }
          a.bibtex.item(data-clipboard-text=entry.getBibTeX())
            i.book.icon
            | #{en ? 'Copy BibTeX' : 'BibTeXをコピー'}
    - if (withIcon) {
    i.icon(class=entry.getIconClass())
    - }
    .content
      h4.ui.header #{entry.entryTags.title}
      .description: .ui.list
        .item.labels
          i.right.triangle.icon
          .content 
            span.ui.tiny.label
              i.calendar.icon
              | #{entry.entryTags.year}
            - if (entry.entryTags.series) {
            span.ui.tiny.green.label
              i.student.icon
              | #{entry.entryTags.series}
            - }
            - if (entry.entryTags.addition) {
            span.ui.tiny.red.label
              - if (entry.entryTags.addition.indexOf('Invited') < 0) {
              i.trophy.icon
              - }
              | #{entry.entryTags.addition}
            - }
            - if (entry.entryTags.group) {
            span.ui.tiny.teal.label
              | #{entry.entryTags.group}
            - }
            - if (withProjectLabel) {
            - if (entry.entryTags.project && projectsTable[entry.entryTags.project]) {
            - const p = projectsTable[entry.entryTags.project];
            a.ui.tiny.basic.red.label(href=p.getLink(lang, basePath))
              i.lab.icon
              | !{p.getTitle(lang)}
            - }
            - }
        .item.authors
          i.users.icon
          .content
            | !{entry.getAuthorsTags().join(', ')}
            - if (entry.entryTags.editor) {
            |  (Eds. !{entry.getEditorsTags().join(', ')})
            - }
        - if (entry.getBook().length > 0) {
        .item.book
          i.book.icon
          .content #{entry.getBookWithPages()}
        - }

mixin render-major-publication(entry)
  span.labels
    span.ui.label
      i.calendar.icon
      | #{entry.entryTags.year}
    - if (entry.entryTags.series) {
    span.ui.green.label
      i.student.icon
      | #{entry.entryTags.series}
    - }
  h4.ui.header #{entry.entryTags.title}
  .ui.list.meta
    .item.authors
      i.users.icon
      .content
        | !{entry.getAuthorsTags().join(', ')}
        - if (entry.entryTags.editor) {
        |  (Eds. !{entry.getEditorsTags().join(', ')})
        - }
    .item.book
      i.book.icon
      .content #{entry.getBookWithPages()}
    - if (entry.entryTags.addition) {
    .item.award
      - if (entry.entryTags.addition.indexOf('Invited') < 0) {
      i.trophy.icon
      - }
      .content: strong #{entry.entryTags.addition}
    - }
  .ui.horizontal.divided.list.extra
    - if (entry.entryTags.pdf) {
    a.item(href=entry.entryTags.pdf)
      i.text.file.icon
      | #{en ? 'Paper PDF' : '論文PDF'}
    - }
    - if (entry.entryTags.poster) {
    a.item(href=entry.entryTags.poster)
      i.image.file.icon
      | #{en ? 'Poster PDF' : 'ポスターPDF'}
    - }
    - if (entry.entryTags.slides) {
    a.item(href=entry.entryTags.slides)
      i.powerpoint.file.outline.icon
      | #{en ? 'Slides PDF' : 'スライドPDF'}
    - }
    - if (entry.hasDOIUrl()) {
    a.item(href=entry.getDOIUrl())
      i.barcode.icon
      | #{en ? 'Resolve DOI' : 'DOIを照会'}
    - }
  .ui.form: .field.bibtex
    label BibTeX:
    textarea(readonly) #{entry.getBibTeX()}
    a.ui.bottom.attached.tiny.bibtex.button(data-clipboard-text=entry.getBibTeX())
      i.copy.icon
      | #{en ? 'Copy to the clipboard' : 'クリップボードにコピー'}

mixin render-project-card(p)
  .card(id=p.project ? `projects-${p.project}` : undefined, data-project=p.project)
    a.image(href=p.getLink(lang, basePath)): img(src=`${rootPath}images/thumbnails/${p.getThumbnail(lang)}`)
    .content
      a.header(href=p.getLink(lang, basePath))
        - if (p.icon) {
        img.ui.avatar.image(src=`${rootPath}images/icons/${p.icon}`)
        - }
        | !{p.getTitle(lang)}
      .meta !{p.getTags(lang).join('')}
      - let desc = p.getDescription(lang)
      - if (desc.length > 3 && desc.substring(0, 3) === "<p>") {
      .description !{p.getDescription(lang)}
      - } else {
      p.description !{p.getDescription(lang)}
      - }
    .extra.content
      span.right.floated
        i.calendar.icon
        | #{p.getYearString(lang)}
      - if (p.category !== 'private' && p.category !== 'committee') {
      - if (p.hasPublication(lang)) {
      - const pub = publicationsTable[p.getPublication(lang)];
      span
        i.student.icon
        | !{pub ? pub.getSeriesTag() : 'undefined'}
      - } else {
      span #{en ? '(Work in progress)' : '(文献未発表)'}
      - }
      - }

mixin render-project-item(p)
  - const link = p.getLink(lang, basePath);
  .item(id=p.project ? `projects-${p.project}` : undefined, data-project=p.project)
    - if (link === false) {
    .mobile.hidden.bordered.image: img(src=`${rootPath}images/thumbnails/${p.getThumbnail(lang)}`)
    - } else {
    a.mobile.hidden.bordered.image(href=link): img(src=`${rootPath}images/thumbnails/${p.getThumbnail(lang)}`)
    - }
    .content
      - if (link === false) {
      .header
        - if (p.icon) {
        img.ui.avatar.image.mobile.only(src=`${rootPath}images/icons/${p.icon}`)
        - }
        | !{p.getTitle(lang)}
      - } else {
      a.header(href=link, title=p.subtitle ? p.getLongTitle(lang) : undefined)
        - if (p.icon) {
        img.ui.avatar.image.mobile.only(src=`${rootPath}images/icons/${p.icon}`)
        - }
        | !{p.getTitle(lang)}
      - }
      - let desc = p.getDescription(lang)
      - if (desc.length > 3 && desc.substring(0, 3) === "<p>") {
      .description !{p.getDescription(lang)}
      - } else {
      p.description !{p.getDescription(lang)}
      - }
      - if (p.category !== 'concept') {
      .extra
        span.right.floated
          i.calendar.icon
          | #{p.getYearString(lang)}
        - if (p.category !== 'private' && p.category !== 'committee') {
        +render-project-label(p)
        - }
        - if (p.category === 'collaboration') {
        span.ui.tiny.basic.label
          i.handshake.icon
          | #{en ? 'Co-authored' : '共著'}
        - }
        span.meta !{p.getTags(lang).join(' ')}
      - }

mixin render-project-label(p)
  - if (p.hasPublication(lang)) {
  - const pubKey = p.getPublication(lang);
  - const pub = publicationsTable[pubKey];
  - if (pub && pub.getSeriesTag()) {
  span.ui.green.tiny.basic.label
    i.student.icon
    | !{pub.getSeriesTag()}
  - }
  - } else {
  span #{en ? '(Work in progress)' : '(文献未発表)'}
  - }
