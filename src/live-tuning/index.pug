extends ../_layout

block vars
  - p = projectsTable['live-tuning'];
  - title = p.getTitle(lang);
  - me = p.project + '/';

block main
  .mobile.hidden: .ui.right.floated.small.bordered.image(style='z-index: 100')
    img(src=`${rootPath}live-tuning/live2016-kato-livetuning.jpg`)
    .caption: a(href=`${rootPath}publications/live2016-kato-livetuning.pdf`)
      i.book.icon
      | Read the article
  +render-project-header('live-tuning')
  .ui.message
    p This page provides summary and some graphical materials of the workshop paper that was presented at 
      a(href='http://2016.ecoop.org/track/LIVE-2016') ECOOP 2016 LIVE
      | .
    - if (!en) {
    p: +translate('live-tuning/index.pug')
    - }
  .ui.hidden.divider
  section#abstract
    h2.ui.header
      .content #{en ? 'Abstract' : '概要'}
    .ui.basic.segment
      p Live Programming allows programmers to gain information about the program continuously during its development. While it has been implemented in various integrated development environments (IDEs) for programmers, its interaction techniques such as slider widgets for continuous parameter tuning are comprehensible for people without any prior knowledge of programming and have been widely used for a long time.
      p In this paper, we aim to introduce prior work on Live Programming research from the interaction point of view and relate it to Human-Computer Interaction research. We then name the subset of Live Programming interaction that only involves changes in constant values &quot;Live Tuning.&quot; Our example IDEs that implement both Live Programming and Live Tuning interactions are showcased, followed by the discussion on the possible future direction of programming experience (PX) research.
  section#live-tuning-comparison
    .ui.basic.segment: .ui.stackable.two.columns.grid
      .column
        h2.ui.header Live Programming
        p(style='position: relative')
          a#live-programming
            img.ui.fluid.image.hover(src=`${rootPath}live-tuning/live-programming-environment.png`, style='position: absolute; display: none; z-index: 10')
            img.ui.fluid.image(src=`${rootPath}live-tuning/live-programming-environment-shadow.png`, style='z-index: 5')
        ul
          li
            | Interaction design for 
            strong programmers
            | , typically built in development environments
          li Prior knowledge of programming is required.
          li The entire programs are always live and editable.
          li The programmer has full control and is responsible for every aspect of program details.
      .column
        h2.ui.header Live Tuning
        p(style='position: relative')
          a#live-tuning
            img.ui.fluid.image.hover(src=`${rootPath}live-tuning/live-tuning-environment.png`, style='position: absolute; display: none; z-index: 10')
            img.ui.fluid.image(src=`${rootPath}live-tuning/live-tuning-environment-shadow.png`, style='z-index: 5')
        ul
          li
            | Interaction design for 
            strong end-users
            | , built in ordinary runtime environments
          li
            | Prior knowledge of programming is 
            strong not
            |  required.
          li Only a certain number of variables are editable.
          li The programmer and end-user are separating their roles of specifying program details.
  .ui.hidden.divider
  section#motivation
    h2.ui.header Motivation
    .ui.basic.segment: .ui.stackable.two.columns.grid
      .column
        h3.ui.header Because programmers are tired
        ul
          li There are more and more 
            a(href=`${rootPath}programming-with-examples`, title='Programming with Examples to Develop Data-Intensive User Interfaces') data-intensive programs
            |  such as animation design, 
            abbr(title='Internet of Things') IoT
            |  application development, machine learning, etc.
          li The amount and variations of data far surpass what programmers alone can manage and edit. Intensive parameter tunings might be needed per user.
      .column
        h3 Because users are demanding
        ul
          li Live Programming (changing program behaviors without losing context) can benefit end-users. In particular, they can comprehend parameter tuning interfaces and customize programs to match their needs.
          li They typically do not have access to development environments since they lack prior knowledge of programming.
  .ui.hidden.divider
  section#example-ides
    h2.ui.header Example &quot;Live Tuning&quot; 
      abbr(title='Integrated Development Environments') IDEs
    .ui.basic.segment
      h3.ui.header TextAlive
      p
        a(href=`${basePath}textalive/`): strong TextAlive
        |  is an Integrated Design Environment for authoring Kinetic Typography videos.
      .ui.stackable.two.columns.grid
        .column
          img.ui.fluid.bordered.image(src=`${rootPath}live-tuning/textalive-code.png`)
          p.caption
            strong For programmers:
            |  it allows development of algorithms to animate lyrics text in synchrony with music. The timing information of the lyrics text is automatically estimated and can be interactively corrected in the timeline interface. Changes to the animation algorithms update the resulting video in real time.
        .column
          img.ui.fluid.bordered.image(src=`${rootPath}live-tuning/textalive-tuning.png`)
          p.caption
            strong For end-users:
            |  it allows authoring Kinetic Typography videos just as other general video authoring tools. Each phrase, word, and character can be assigned an animation template with appropriate parameter values such as animation speed and font size.
      h3.ui.header f3.js: Form Follows Function()
      p
        a(href=`${basePath}f3js`): strong f3.js
        |  is an Integrated Development Environment for developing <abbr title="Internet of Things">IoT</abbr> applications.
      .ui.stackable.two.columns.grid
        .column
          img.ui.fluid.bordered.image(src=`${rootPath}live-tuning/f3js-code.png`)
          p.caption
            strong For programmers:
            |  It allows to write a single JavaScript codebase that defines not only the behavior of microcontrollers, sensors, and actuators but also the layout of their enclosures. The layout preview is updated in response to every edit in the source code, enabling live programming experience.
        .column
          img.ui.fluid.bordered.image(src=`${rootPath}live-tuning/f3js-tuning.png`)
          p.caption
            strong For end-users:
            |  it allows customizing and creating IoT applications without prior knowledge of programming nor soldering. Each IoT application has parameters to customize its behavior and layout, such as whether to add the countdown feature to a camera.
  .ui.hidden.divider
  section#examples
    h2.ui.header Discussion
    .ui.basic.segment
      p Please refer to 
        a(href=`${rootPath}publications/live2016-kato-livetuning.pdf#page=4`) the paper (p.4-6)
        |  for the detailed discussion. 
        u Underlined
        |  options are those we consider the most interesting and promising.
      ul
        li
          strong Programming environments (for programmers) are getting close to runtime environments (for end-users).
          |  Live Tuning is such a proposal to connect them through the tuning interfaces.
        li
          strong Multiple levels of user interfaces allow varied flexibility to edit programs.
          |  Live Programming aims at the maximum flexibility and Live Tuning is somewhat in the middle between no and maximum flexibility.
        li
          strong How can we resolve or avoid conflicts between edits by multiple users? 
          | 1) seriously implement conflict resolution mechanisms 2) discard old edits as typical Live Programming systems do 3) separate namespaces and resulting application instances 
          u 4) aggregate parameter values from different users
          | .
        li
          strong How can we achieve liveness when it takes time to apply edits? 
          | For instance, updating the 3D models is an instant process, but printing them takes time. 1) significantly progress the research of programmable matter 
          u 2) hack humans' feeling of liveness
          | .
  .ui.hidden.divider
  section#revision
    h2
      i.announcement.icon
      | #{en ? 'Revision history' : '更新履歴'}
    .ui.basic.segment: .ui.divided.feed
      .event: .content
        .date 7/16/2016
        .summary Upload the initial revision.
  .ui.hidden.divider
  +render-project-publications('live-tuning', 'live2016-kato-livetuning')

block post-scripts
  script.
    $(function(){
      $('#live-programming').hover(function (){
        $('#live-programming>img.hover').fadeIn('fast');
      }, function (){
        $('#live-programming>img.hover').fadeOut('fast');
      });
      $('#live-tuning').hover(function (){
        $('#live-tuning>img.hover').fadeIn('fast');
      }, function (){
        $('#live-tuning>img.hover').fadeOut('fast');
      });
    });
