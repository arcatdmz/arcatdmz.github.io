extends ../_layout

block vars
  - p = projectsTable['pressing']
  - title = p.getTitle(lang);
  - me = p.project + '/';

block main
  +render-project-header('pressing')
  .ui.hidden.divider
  .ui.stackable.grid
    .ten.wide.column: +body()
    .six.wide.column: +images()
  .ui.hidden.divider
  +render-project-publications('pressing')

mixin body()
  section#abstract
    h2.ui.header #{en ? 'Abstract' : '概要'}
    .ui.basic.segment
      block abstract
        p Pressing is a pressure-sensitive programming environment with visual feedbacks of the built-in 2D physical simulator. It runs on a PC with 
          a(href='http://www.youtube.com/watch?v=1zo0kJ_wi80') a practical pressure-sensitive keyboard
          |  developed by 
          a(href='http://www.microsoft.com/appliedsciences/') Microsoft Applied Science Group
          | .
        p This work was presented at UIST 2009 
          a(href='http://www.acm.org/uist/uist2009/call/contest.htmll') Student Innovation Contest
          |  with 
          a(href=`${rootPath}publications/uist2009-kato-pressing-flyer.pdf`)
            i.file.icon
            | a flyer
          | .
      .ui.hidden.divider
      .ui.fluid.image
        img(src='http://digitalmuseum.jp/en/software/pressing/images/usage.png')
      .caption #{en ? 'Example code and its execution results' : 'サンプルコードとその実行結果'}
  .ui.hidden.divider
  section#px
    h2.ui.header #{en ? 'Programming Experience' : 'プログラミング体験'}
    .ui.basic.segment
      block px
        p When the programmer runs the software, a vacant screen appears with a text box. He can start typing immediately and there is no program compilation; The programming experience is completely live and direct.
        p
          | For example, when he types 
          code new Ball()
          |  and hits the enter key, a ball apears on the screen. The size of the ball is defined according to how strong the class name 
          i Ball
          |  is typed.
        p
          | There are several interesting predefined classes. For instance, these two sentences will bind the ball instance to a variable 
          i b
          |  and its track will be painted with a red brush. The brush width is defined by how strong 
          i Brush
          |  is typed.
        pre b = new Ball(); b.pen(new Brush(255,0,0));
        p The programmer can interact with the instantiated ball objects not only by writing code,
        pre World.setGravity(0, 0.98); b.setSpeed(100);
        p but also by directly touching them using a mouse cursor. This environment is equipped with a two-dimensional physics simulator and thus provides natural interaction experience.
  .ui.hidden.divider
  section#implementation
    h2.ui.header #{en ? 'Implementation' : '実装'}
    .ui.basic.segment
      block implementation
        p This integrated development environment (IDE) has its original interpreter named 
          i Kotosaka
          |  which interprets a JavaScript-like language. The language shares basic ideas of object-oriented programming such as classes (methods and fields), functions and variables. Variables can be used without declaration and are dynamically typed, capable of storing primitive values (boolean, integer and string,) class instances, and function objects.
        p The IDE contains a two-dimensional virtual world equipped with a 
          a(href='http://box2d.org/') Box2D
          | -based physics simulator and provides interesting APIs to interact with the virtual world. Examples are shown below in the figure.

mixin images()
  a.ui.fluid.image(href=`${rootPath}pressing/pressing.png`)
    img(src=`${rootPath}pressing/pressing.png`)
  .caption #{en ? 'Screenshot of the Pressing IDE' : '統合開発環境Pressingのスクリーンショット'}
  .ui.hidden.divider
  a.ui.fluid.image(href='http://www.flickr.com/photos/zhiquan/3989241000/')
    img(src=`${rootPath}pressing/3989241000_35cb13136a_o.jpg`)
  .caption #{en ? 'Demonstration at UIST \'09' : 'UIST \'09でのデモの様子'}
  .ui.hidden.divider
