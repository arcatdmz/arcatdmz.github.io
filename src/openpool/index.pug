extends ../_layout

block vars
  - p = projectsTable['openpool'];
  - title = p.getTitle(lang);
  - me = p.project + '/';
  - var additionalLabels = ['<span class="ui tiny green basic label"><i class="student icon"></i>SxSW \'13 Gaming Expo, Trade Show</span>'];

block main
  block project-header
    +render-project-header('openpool', additionalLabels)
  .ui.message
    block message
      | OpenPool is a collaborative open-source project developed at 
      a(href='https://github.com/openpool/openpool-core') GitHub
      | . The official site is 
      a(href='http://www.openpool.cc/') openpool.cc
      | .
  .ui.hidden.divider
  .ui.stackable.two.columns.grid
    .column: +body()
    .column: +videos()
  .ui.hidden.divider
  +render-project-publications('openpool', 'gcce2013-kato-openpool')

mixin body()
  section#abstract
    h2.ui.header #{en ? 'Abstract' : '概要'}
    .ui.basic.segment
      block abstract
        p People love playing games. Games have been a good way to build social relations with others. Therefore, studying the impact of digital augmentation on such experience has been an interesting research topic in the field of Human-Computer Interaction. Ishii et al. proposed PingPongPlus
          a(href='#ppp') [1]
          | , a novel way of augmenting ping pong table with a set of microphone array in 1999. The project later became an open-source project in 2011
          a(href='#pppp') [2]
          | , which needed some soldering to be deployed. We walk the same line with PingPongPlus, but with a billiard table and off-the-shelf hardware products.
        p In this page, we introduce OpenPool, an open-source project that augments a standard billiard table with the cutting-edge computing technologies to provide the "super-billiard" experience.
  .ui.hidden.divider
  section#implementation
    h2.ui.header #{en ? 'Implementation' : '実装'}
    .ui.basic.segment
      p OpenPool is an open-source project that aims to be installed at as many places as possible so that more people can enjoy the super-billiard experience. Its hardware is easy to be deployed at any billiard tables and its software is easy to be installed on personal computers running Windows or Mac.
      p Furthermore, the basic features of the software such as ball detection and pocket detection are exposed as simple APIs of Processing libraries. Therefore, the programmer can easily design his/her own super-billiard experience. There are currently two libraries: base library and pocket detection library. In the following subsections, we describe these libraries in detail.
      h3.ui.header OpenPool core library
      pre.prettyprint.linenums.
        OpenPool op = new OpenPool(this);

        op.updateBalls();
        for (int i = 0; i &lt; op.balls; i ++) {
          Ball ball = op.balls[i];
          ellipse(ball.x, ball.y, 10, 10);
          if (ball.prev != null) {
            line(ball.x, ball.y, ball.prev.x, ball.prev.y);
          }
        }
      p Minimum hardware setup of OpenPool consists of off-the-shelf products: two depth cameras ("Kinect" by Microsoft), a projector and a personal computer. Given the hardware setup, OpenPool base library computes ball positions and provide the information through simple APIs.
      p The computation is a simple image processing pipeline. First, with some callibrations of the camera positions, two depth images from the cameras form one depth map on the billiard table. Then, the ball positions on the table are estimated from the depth map by background substraction and blob detection.
      h3.ui.header OpenPool pocket detection library
      pre.prettyprint.linenums.
        OpenpoolBoostPocket p = new OpenpoolBoostPocket(this, "COM4");
        p.start();

        int[] pockets = p.getPockets();
        for (int i = 0; i &lt; pockets.length; i++) {
          if (pockets[i] &gt; 0) {
            print(pockets[i]);
            print(" balls fell in the pocket no.");
            println(i + 1);
          }
        }
      p With the base library, the programmer can design a basic effect that responds to the ball positions. Though, the ball detection is not always stable due to environmental noise. This stability issue makes it difficult to design effect that fires when a ball falls into a pocket.
      p To address the issue, we provide a set of additional hardware and software named "boost kit." The hardware is implemented with mbed and some basic sensors, whose circuit design is published as an open-hardware project. Future work includes devleopment of more boost kits for various purposes such as collision detection.

mixin videos()
  section#videos
    .ui.embed: iframe(src='https://www.facebook.com/video/embed?video_id=608850275796418', frameborder='0', allowfullscreen='')
    .caption Playing 8 ball pool with OpenPool
    .ui.hidden.divider
    .ui.embed: iframe(src='https://www.facebook.com/video/embed?video_id=614971478517631', frameborder='0', allowfullscreen='')
    .caption Collision detection between balls and virtual objects
    .ui.hidden.divider
    .ui.embed: iframe(src='https://www.facebook.com/video/embed?video_id=615808058433973', frameborder='0', allowfullscreen='')
    .caption Animation effect triggered by an OpenPool pocket detection sensor
  .ui.divider
  section#press
  h2.ui.header #{en ? 'Media Coverage' : 'メディア掲載'}
  .ui.basic.segment(style='margin-bottom: -0.5em'): .ui.stackable.grid: .three.columns.row
    - for (const e of mediaList.filter(e => !e.private && !e.draft && (e.projects || []).indexOf('openpool') >= 0)) {
    .column(style='margin-bottom: 0.5em'): a.item(href=e.archive || e.permalink, title=e.text.en)
      img.ui.fluid.image(src=`${rootPath}openpool/${e.media.en.split(/[\s.()]+/g).join('').toLowerCase()}.png`, alt=e.media.en)
    - }
  .ui.divider
  section#related-work
    h2.ui.header #{en ? 'Related Work' : '関連研究'}
    ol
      li#ppp: a(href='https://tangible.media.mit.edu/project/pingpongplus/') PingPongPlus
      li#pppp: a(href='https://tangible.media.mit.edu/project/pingpongplusplus/') PingPong++
