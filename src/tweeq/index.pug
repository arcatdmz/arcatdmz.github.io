extends ../_layout

block vars
  - p = projectsTable['tweeq'];
  - title = p.getTitle(lang);
  - me = p.project + '/';

block post-footer
  a.ui.circular.icon.popup-menu.large.grey.hidden.button
    i.sidebar.icon
  .ui.hidden.popup-menu.popup: .ui.divided.list
    a.item(href='#body')
      i.chevron.circle.up.icon
      .content #{en ? 'Top' : 'トップ'}
    a.item(href='#abstract')
      i.right.triangle.icon
      .content #{en ? 'Abstract' : '概要'}
    a.item(href='#tweeq')
      i.right.triangle.icon
      .content #{en ? 'Reference implementation' : 'リファレンス実装'}

block main-hero-unit
  +render-project-hero('tweeq')

block main
  section#abstract
    h2.ui.header
      .content #{en ? 'Abstract' : '概要'}
    .ui.basic.segment
      p Professionals in the creative industry rely on digital content authoring tools that provide graphical user interface (GUI) widgets for tuning primitive values, such as numeric sliders, rotary knobs, and color pickers. Despite their prevalence, GUI studies have sometimes been considered "done" in the context of HCI, and users' frustrations with these widgets might have gone unheard.
      p We sampled such widgets from popular production software and analyzed their interaction design, identifying three core design principles:
      ul
        li support diverse input modalities to match users' nuanced control strategies,
        li prioritize high-speed and accurate interaction for skilled users, and
        li minimize visual footprint to preserve the creative workspace.
      p We then provide reference implementations of GUI widgets that follow these guidelines, named <i>Tweeq</i>. Developed in parallel with the first author's animation projects, these widgets allow parameter tuning with fewer clicks, provide continuous visual feedback through overlays, and facilitate gestural and keyboard inputs that do not require constant visual attention.
      p To evaluate <i>Tweeq</i>, we implemented example applications and conducted an informal expert user study, which revealed generally positive reactions and indicated that the proposed design principles may offer a useful direction for GUI development in creative software.
    .ui.basic.segment
      p: img.ui.fluid.image(src=`${rootPath}tweeq/tweeq.png`)
      p.caption
        i Tweeq
        | , a set of GUI widgets proposed in this paper for creative software. 
        strong (a)
        |  Components of <i>Tweeq</i>. 
        strong (b)
        |  Color input and its overlay UI. 
        strong (c)
        |  Timecode input with overlay UI. 
        strong (d)
        |  Simultaneous parameter tuning on angle inputs.
      p *Note that Baku Hashimoto carried out this work partly in the capacity of a collaborative researcher at AIST, as reflected in the paper author's affiliation, and partly as an independent visual artist.
  .ui.hidden.divider
  section#tweeq
    h2
      i.github.icon
      | #{en ? 'Reference implementation' : 'リファレンス実装'}
    .ui.basic.segment 
      p 
        | The reference implementation of the design principles, <i>Tweeq</i>, developed with Vue.js and TypeScript, is available as an open-source project on 
        a(href='//github.com/baku89/tweeq')
          i.github.icon
          | GitHub
        | .
    .ui.basic.center.aligned.segment
      .ui.huge.buttons
        a.ui.primary.button(href="//github.com/baku89/tweeq")
          | Code
        .ui.divider
        a.ui.button(href="//baku89.github.io/tweeq")
          | Documents
  .ui.hidden.divider
  section#revision
    h2
      i.announcement.icon
      | #{en ? 'Revision history' : '更新履歴'}
    .ui.basic.segment: .ui.divided.feed
      .event: .content
        .date 8/1/2025
        .summary Upload the initial revision.
  .ui.hidden.divider
  +render-project-publications('tweeq', 'uist2025-hashimoto-tweeq')
