extends ../_layout

block vars
  - title = title || 'User Interfaces for Live Programming';
  - description = description || 'Live programming eliminates the gulf between code and execution. To design live programming systems, we first need to understand what we are developing. Once we gain domain-specific knowledge of the target applications, we create user interfaces to edit the running application, such as scrubbing sliders, color palettes, and timeline interfaces. The key to the fluid programming experience of live programming is the combination of deep understanding of the target applications and adoption of interactive user interfaces.';
  - imageUrl = `${protocol}://${domain}${rootPath}images/panels/live-programming.jpg`;
  - me = 'live-programming/';
  - const slideUrl = `${protocol}://${domain}${rootPath}publications/live2017-kato-keynote-slides.pdf`;
  - const slideImagePath = `${rootPath}live-programming/live2017/live2017-kato-keynote-slides`;

block post-footer
  a.ui.circular.icon.popup-menu.large.grey.hidden.button
    i.sidebar.icon
  .ui.hidden.popup-menu.popup: .ui.divided.list
    a.item(href='#body')
      i.chevron.circle.up.icon
      .content #{en ? 'Top' : 'トップ'}
    a.item(href='#abstract')
      i.right.triangle.icon
      .content #{en ? 'Summary' : '概要'}
    a.item(href='#presentation-jssst2023')
      i.right.triangle.icon
      .content #{en ? 'JSSST 2023 Tutorial' : '日本ソフトウェア科学会 第40回大会 チュートリアル'}
    a.item(href='#presentation-live2017')
      i.right.triangle.icon
      .content #{en ? 'LIVE 2017 Keynote' : 'LIVE 2017 基調講演'}
    a.item(href='#further-readings')
      i.right.triangle.icon
      .content #{en ? 'Relevant projects' : '関連プロジェクト'}
    a.item(href='#revisions')
      i.right.triangle.icon
      .content #{en ? 'Revision history' : '更新履歴'}

block main-hero-unit
  -
    let additionalLabels = [
      '<span class="ui tiny red basic label">'
        + (en ? 'Tutorial course at JSSST \'23' : '日本ソフトウェア科学会大会 第40回大会 チュートリアル')
        + '</span>'
    ];
  +render-project-hero('live-programming', additionalLabels)

block main
  section#abstract: +abstract()
  .ui.hidden.divider
  section#presentation-jssst2023
    +presentation-jssst2023()
  section#presentation-live2017
    +presentation-live2017()
  .ui.hidden.divider
  section#further-readings: +further-readings()
  .ui.hidden.divider
  section#revisions: +revisions()

mixin abstract()
  h2.ui.header #{en ? 'Summary' : '概要'}
  .ui.basic.segment
    p #{description}
    .ui.stackable.two.columns.grid
      .column
        - if (en) {
        p At 
          a(href='https://jssst2023.wordpress.com/tutorial') the tutorial course as part of The 40th 
            abbr(title='Japan Society for Software Science and Technology') JSSST
            |  Annual Conference (Japanese)
          | , me and visual artist 
          a(href='https://baku89.com/?lang=en') Baku Hashimoto
          |  served as lecturers, presenting a brief history of Live Programming research and providing a hands-on opportunity to develop a web-based Live Programming system.
        p Programming environments that focus on "liveness" have been around for a long time, like visual programming and Smalltalk-based systems, but they have recently attracted renewed attention as a key idea to realize a fluid programming experience. We attempted to review the situation from the point of view of both researchers and artists.
        - } else {
        p 
          a(href='https://jssst2023.wordpress.com/tutorial') 日本ソフトウェア科学会 第40回大会 チュートリアル
          | では、ビジュアルアーティストの
          a(href='https://baku89.com') 橋本麦
          | 氏と共に講師を務め、ライブプログラミング研究の概略史紹介と、ライブプログラミング環境を開発するハンズオンを行いました。「ライブネス（Liveness）」に着目したプログラミング環境はビジュアルプログラミングやSmalltalk処理系など古くからありましたが、近年、滑らかなプログラミング体験を提供するキーアイデアの一つとして改めて注目されています。研究者とアーティスト双方の観点から状況整理を試みました。
        - }
      .column
        - if (en) {
        p In the keynote talk at LIVE '17, I discussed the liveness of programming systems in light of user interface design. I introduced user interfaces for programming and discussed the importance of integrating graphical representations into programming environments. I extended the scope of &quot;liveness&quot; by describing two kinds of interactions, physical and developer-user, and provided insights on designing future live programming systems.
        p In particular, regarding the user interfaces for enhancing developer-user interactions, there are two sub-projects called 
          a(href=`${basePath}live-tuning/`) Live Tuning
          |  and 
          a(href=`${basePath}user-generated-variables/`) User-Generated Variables
          | .
        - } else {
        p
          a(href='https://2017.splashcon.org/details/live-2017/7/Keynote-User-Interfaces-for-Live-Programming') LIVE 2017 基調講演
          | では、ユーザインターフェース設計の観点からプログラミング環境の「ライブネス（Liveness）」について議論しました。プログラミングのためのユーザインターフェースを紹介し、画像表現をプログラミング環境に統合することの重要性を論じました。物理的なインタラクションと、開発者・ユーザ間のインタラクションという2種類のインタラクションを具体的な研究事例と共に紹介し、「ライブネス」の定義を拡大して、将来のライブプログラミング・システムの設計に関して示唆を提供しました。
        - }

mixin presentation-jssst2023
  h2.ui.header
    - if (en) {
    | The 40th 
    abbr(title='Japan Society for Software Science and Technology') JSSST
    |  Annual Conference Tutorial
    - } else {
    | 日本ソフトウェア科学会 第40回大会 チュートリアル
    - }
  .ui.basic.segment
    .ui.stackable.two.columns.grid
      .column
        h3.ui.header #{en ? 'Presentation Slides (Japanese)' : '発表スライド'}
        .ui.embed(data-url='https://docs.google.com/presentation/d/e/2PACX-1vSFvd9_lLppM-CnW9Qr2TXxPCETq9WAedQPIvgTebXe328vTvSP3-SUIJNGtimZR7ygSSb4LOHheLYq/embed', data-placeholder=`${rootPath}live-programming/jssst2023/jssst-live-programming-tutorial.jpg`, data-icon='video play outline')
        .caption
          h4.ui.header #{en ? 'Introduction to Live Programming: Try It, Make It, Know It' : '試して作って知る Live Programming入門'}
          .ui.horizontal.divided.list
            .item
              a(href='https://docs.google.com/presentation/d/1MIDPeccko-oce83eaWLKuEctzjt2NF_R9b-ouhc_yCI/edit?usp=sharing')
                i.external.icon
                | Google Slides
            .item
              a(href='https://jssst2023.wordpress.com/tutorial')
                i.external.icon
                | #{en ? 'Tutorial official page (Japanese)' : '大会公式ページ'}
      .column
        h3.ui.header #{en ? 'What is Live Programming?' : 'ライブプログラミングとは？'}
        a.ui.fluid.bordered.image(href=`${rootPath}live-programming/jssst2023/jssst-live-programming-tutorial-16.jpg`)
          img(src=`${rootPath}live-programming/jssst2023/jssst-live-programming-tutorial-16.jpg`)
        .caption
          - if (en) {
          p Live Programming has the clear advantage of 
            strong not
            |  forcing programmers to bet on a single shot, a feature captured in 
            a(href='https://dspace.mit.edu/handle/1721.1/61549') Chris Hancook's dissertation
            |  by the metaphor of the bow and the watering hose.
          - } else {
          p ライブプログラミングには一発必中をプログラマに
            strong 強いない
            | 特長があります。
            a(href='https://dspace.mit.edu/handle/1721.1/61549') Chris Hancook氏の博士論文
            | ではこれを弓とホースの比喩で表しました。
          - }
  .ui.basic.segment
    - if (en) {
    p This tutorial introduced the history of live programming research and examined its significance from different perspectives by reviewing related tools and practices proposed in research and used in visual art.
    p Technically speaking, the pursuit of &quot;liveness&quot; in programming systems reached a milestone in the 1990s, when many visual programming systems employing dataflow languages and environments, including 
      a(href='https://doi.org/10.1016/S1045-926X(05)80012-6') VIVA
      | , were researched and developed to allow interactive editing of programs, and a framework for user interface development in Smalltalk-based systems, 
      a(href='http://dx.doi.org/10.1145/215585.215636') Morphic
      | , appeared. However, with the exception of Spreadsheet, visual programming did not become mainstream, and general-purpose object-oriented languages and integrated development environments, which were in some ways degraded from Smalltalk, gained popularity.
    p We had to wait until the 2010s to see a renewed interest in &quot;liveness&quot; in the programming experience, when 
      a(href='https://archive.org/details/vimeo-36579366') Bret Victor's &quot;Inventing on Principle&quot; talk
      |  with many appealing demonstrations took place and 
      a(href='https://liveprog.org') the Workshop on Live Programming
      |  was held for the first time. Here I see &quot;liveness&quot; as a kind of user experience that can be achieved by building 
      a(href='http://worrydream.com/LadderOfAbstraction/') a ladder of abstraction
      |  from an abstract programming language to a concrete program execution state, and individual technical components such as a single programming language design or a single tool design do not seem to be sufficient. At the heart of the design of live programming systems is the design of the user interface, which is tailored to the domain-specificity of the applications to be developed in the programming system. From this perspective, visual programming environments for designers and tools for the visual arts have been successful for a long time, and more recently, there have been an increasing number of live programming systems specialized for diverse application domains.
    p For this tutorial, please also see 
      a(href='https://scrapbox.io/ProgrammingExperience/JSSST2023_%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB') the corresponding page on Scrapbox (Wiki site; Japanese)
      |  and 
      a(href='https://github.com/baku89/jssst40-tuts#40th-jssst-tutorial') the hands-on documentation on GitHub (Japanese)
      | . Also, for future perspectives not covered in depth in the tutorial, please refer to 
      a(href='#presentation-live2017') my keynote at LIVE 2017
      | .
    - } else {
    p 本チュートリアルでは、ライブプログラミング（Live Programming）に関する研究の歴史を紹介するとともに、ビジュアルアートの実践において使われてきた関連ツールや表現を振り返ることで、その意義を多角的に検証しました。
    p 技術的には、ビジュアルプログラミング（Visual Programming）においてプログラムのインタラクティブな編集が可能なデータフロー言語・環境が 
      a(href='https://doi.org/10.1016/S1045-926X(05)80012-6') VIVA
      |  をはじめ多数研究開発され、Smalltalk処理系においてユーザインタフェース開発用フレームワーク 
      a(href='http://dx.doi.org/10.1145/215585.215636') Morphic
      |  が登場した1990年代で、プログラミングにおけるライブネス（Liveness）を追求する取り組みは、いったんの節目を迎えたと考えてよいでしょう。しかし、ビジュアルプログラミングはSpreadsheetを除いてなかなかメインストリームにならず、Smalltalk処理系よりもある意味でデグレードした汎用オブジェクト指向言語や統合開発環境が人気を博します。
    p プログラミング体験におけるライブネスが再度注目を集めるには 
      a(href='https://archive.org/details/vimeo-36579366') Bret Victor氏のデモを交えた講演 &quot;Inventing on Principle&quot;
      |  や 
      a(href='https://liveprog.org') Workshop on Live Programming
      |  が初めて開催される2010年代まで待つ必要があります。ライブネスとは、抽象的なプログラミング言語から具体的なプログラムの実行状態に至るまでの
      a(href='http://worrydream.com/LadderOfAbstraction/') 抽象度のはしご（Ladder of abstraction）
      | を掛けることで実現できるユーザ体験であり、単一の言語設計、単一のツール設計に還元できる要素技術は本質ではなさそうです。その代わり、開発対象のアプリケーションの特性に寄り添ったユーザインタフェース設計こそが鍵なのではないでしょうか。そうした観点で黎明期から成功してきたのがデザイナ向けのビジュアルプログラミング環境やビジュアルアート向けのツール群であり、さらに近年、さまざまなドメインに特化したライブプログラミングのシステムが増えてきているという状況だと思います。
    p 本チュートリアルに関しては、
      a(href='https://scrapbox.io/ProgrammingExperience/JSSST2023_%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB') Scrapboxの該当ページ
      | と
      a(href='https://github.com/baku89/jssst40-tuts#40th-jssst-tutorial') GitHub のハンズオン資料
      | もご覧ください。また、チュートリアルでは深く触れなかった将来展望については、
      a(href='#presentation-live2017') LIVE 2017での基調講演
      | をご参照ください。
    - }
  .ui.basic.right.aligned.segment
    a.ui.primary.button(href='https://jssst2023.wordpress.com/tutorial')
      | #{en ? 'Tutorial official page (Japanese)' : '大会公式ページ'}
      i.chevron.circle.right.icon
  .ui.hidden.divider

mixin presentation-live2017()
  h2.ui.header #{en ? 'LIVE 2017 Keynote' : 'LIVE 2017 基調講演'}
  .ui.basic.segment
    .ui.stackable.two.columns.grid
      .column
        h3.ui.header #{en ? 'Presentation Slides' : '発表スライド'}
        .ui.embed(data-url=slideUrl, data-placeholder=`${slideImagePath}00.jpg`, data-icon='video play outline')
        .caption
          h4.ui.header #{en ? 'User Interfaces for Live Programming' : 'ライブプログラミングのためのユーザインタフェース'}
          .ui.horizontal.divided.list
            .item
              a(href=slideUrl)
                i.download.icon
                | #{en ? 'Download' : 'ダウンロード'}
            .item
              a(href='https://2017.splashcon.org/event/live-2017-keynote-a')
                i.external.icon
                | #{en ? 'LIVE 2017 Website' : 'LIVE 2017 Webサイト'}
      .column
        h3.ui.header #{en ? 'What is Live Programming?' : 'ライブプログラミングとは？'}
        a.ui.fluid.bordered.image(href=`${slideImagePath}05.jpg`)
          img(src=`${slideImagePath}05.jpg`)
        .caption
          - if (en) {
          p Live Programming refers to a <abbr title="Programming Experience">PX</abbr> that provides continuous feedback to the programmer about the program being developed.
          - } else {
          p ライブプログラミングとは、開発中のプログラムについてプログラマに継続的なフィードバックを提供する<abbr title="Programming Experience（プログラミング体験）">PX</abbr>を指します。
          - }
  .ui.basic.segment
    - if (en) {
    p Live Programming systems provide concrete information about how the program behaves when it is executed. With help of this concrete information, programmers can easily iterate on editing and testing the program behavior.
    p Please note that the origin of Live Programming is not new as you can see early examples in visual programming and object-oriented programming environments. Then, why is it attracting much attention these days? In short, I consider it is because of its focus on the user experience.
    - } else {
    p ライブプログラミングのシステムは、プログラムが実行されたときどう振る舞うかについて、具体的な情報を提供します。この具体的な情報の助けを借りて、プログラマはプログラムの編集やデバッグを簡単に繰り返すことができます。
    p ライブプログラミングの起源は、ビジュアルプログラミングやオブジェクト指向プログラミングのための環境の初期の事例まで辿ることができ、決して新しいものではありません。では、なぜ最近、改めて注目を集めているのでしょうか？一言で言えば、ユーザ体験への注力があるからだと私は考えています。
    - }
  .ui.basic.segment
    .ui.stackable.two.columns.grid
      .column
        a.ui.fluid.bordered.image(href=`${slideImagePath}13.jpg`)
          img(src=`${slideImagePath}13.jpg`)
      .column
        .caption
          - if (en) {
          p Live Programming requires decent user interfaces for exploring the problem space.
          p As such, building decent Live Programming systems requires deep understanding on the target application domains; e.g. avoid sudden changes in the program behavior, keep the program and its output relevant, and allow continuously exploring the problem space.
          - } else {
          p ライブプログラミングを実現するには、問題空間を探索するための適切なユーザインタフェースが必要です。
          p そのため、適切なライブプログラミングのシステムを構築するには、対象となるアプリケーションのドメインについて深く理解する必要があります。例えば、プログラムの動作がとつぜん大きく変化しないようにしたり、プログラムと出力の間の関連付けが失われないようにしたり、問題空間を継続的に探索できるようにしたりといったことが重要です。
          - }
  .ui.basic.segment
    - if (en) {
    p From now on, I will discuss three perspectives on user interface design of Live Programming systems and interesting directions to explore in each.
    - } else {
    p ここからは、ライブプログラミングのためのユーザインタフェース設計について考えるための三つの観点を紹介し、それぞれに関する将来展望を議論します。
    - }
    .ui.stackable.three.columns.grid
      .column
        h4.ui.header #{en ? 'Programming with End-users' : 'エンドユーザとプログラミングする'}
        a.ui.fluid.bordered.image(href=`${slideImagePath}18.jpg`)
          img(src=`${slideImagePath}18.jpg`)
        .caption
          - if (en) {
          p As Live Programming systems provide interactive and intuitive user interfaces for debugging and editing programs, some of the user interfaces can be exposed to the end-users so that they can customize the programs as they wish. [
            a(href=`${basePath}live-tuning/`) Live Tuning
            | ]
          p When the provided user interfaces cannot satisfy their needs, they can still submit requests to programmers with rich contextual information provided by the Live Programming systems. [
            a(href=`${basePath}user-generated-variables/`) User-Generated Variables
            | ]
          p Live Programming techniques benefit not only programmers, but also end-users, and enable 
            a(href=`${basePath}programming-as-communication/`) Programming as Communication
            | .
          - } else {
          p ライブプログラミングのシステムは、プログラムのデバッグや編集のためのインタラクティブで直感的なユーザインタフェースを提供します。こうしたインタフェースの一部をエンドユーザに解放すれば、プログラムの振る舞いを容易にカスタマイズできるようになります。 [
            a(href=`${basePath}live-tuning/`) Live Tuning
            | ]
          p また、エンドユーザがプログラムの既存のユーザインタフェースで満足できない場合にも、ライブプログラミングのシステムが提供する豊富なコンテクスト情報を用いて、プログラマに機能リクエストを送ることが容易になります。 [
            a(href=`${basePath}user-generated-variables/`) User-Generated Variables
            | ]
          p ライブプログラミングの技術はプログラマだけでなくエンドユーザにも恩恵のあるもので、「
            a(href=`${basePath}programming-as-communication`) コミュニケーションとしてのプログラミング
            | 」という新しい考え方をもたらします。
          - }
      .column
        h4.ui.header #{en ? 'Programming this Material World' : '実世界をプログラミングする'}
        a.ui.fluid.bordered.image(href=`${slideImagePath}27.jpg`)
          img(src=`${slideImagePath}27.jpg`)
        .caption
          - if (en) {
          p Live Programming often targets simple applications such as drawing graphics. In contrast, &quot;software is eating the world&quot; and there are complex and interesting applications such as physical computing and virtual reality.
          p Their actual &quot;framerate&quot; can be very slow; e.g. printing device enclosures and producing scent. Emulating, or sometimes even pretending, is needed to provide the continuous feedback.
          p Making full use of five senses in programming environments would be crucial in the near future.
          - } else {
          p ライブプログラミングのシステムの事例には、グラフィックを描画する単純なアプリケーションを対象とするものが多く見られます。しかし、それとは対照的に、「Software is eating the world」とも言われる現在、フィジカルコンピューティングやバーチャルリアリティなどの複雑で興味深いアプリケーションが多数現れています。
          p そうしたアプリケーションにおける「フレームレート」は、例えばデバイス筐体の印刷や香りの生成などの場合、非常に遅いです。継続的なフィードバックを提供するためには、情報をエミュレートすること、（ないものがあたかもそこにあるかのような）フリをすることが必要になります。
          p プログラミング環境において五感をフルに活用することは、近い将来、非常に重要になってくるはずです。
          - }
      .column
        h4.ui.header #{en ? 'Programming with Time Travel' : '時間旅行しながらプログラミングする'}
        a.ui.fluid.bordered.image(href=`${slideImagePath}39.jpg`)
          img(src=`${slideImagePath}39.jpg`)
        .caption
          - if (en) {
          p Live Programming puts focus on providing live feedback to the programmer, but it does not always mean providing realtime information of the running program.
          p The timeline interface and record and replay features together provide time traveling experience and play an important role to find critical timings in the history. Once the timing of interest is found, editing the code and program input would update the program output, allowing the programmer to explore future&quot;s.&quot;
          - } else {
          p ライブプログラミングは、プログラマに「ライブ」なフィードバックを提供することを重視しますが、それは必ずしも、実行中のプログラムに関する情報をリアルタイムに提供することを意味しません。
          p プログラムの振る舞いを記録・再生する機能を備えたタイムラインインタフェースは、時間旅行のような体験を通して、プログラムの実行履歴の中から興味深いタイミングを見つけるために重要な役割を果たします。特定のタイミングを見つけたら、コードまたはプログラム入力、あるいはその両方を編集することで、プログラムの出力を更新し、ありえたかもしれない未来を自由に探索することができます。
          - }
  .ui.basic.segment
    a.ui.fluid.bordered.image(href=`${slideImagePath}47.jpg`)
      img(src=`${slideImagePath}47.jpg`)
    .caption
      - if (en) {
      p Designing Live Programming systems is not just about language design, a single user, a single UI, it is about designing the whole experience.
      p Live Programming is a very interdisciplinary topic and involves all of Programming Language design, Software Engineering, and designing Human-Computer Interaction. 
        a(href='https://liveprog.org') LIVE
        | , 
        a(href='http://programming-experience.org') PX
        |  workshops and 
        a(href='https://sigpx.org/en') SIGPX
        |  are such an attempt to attract people from all of these research fields.
      - } else {
      p ライブプログラミングのシステム設計は、プログラミング言語の設計、一人のユーザのための設計、単一のユーザインタフェースの設計に留まらず、全体としての体験設計に他なりません。
      p ライブプログラミングは非常に学際的なトピックであり、プログラミング言語、ソフトウェア工学、Human-Computer Interactionのすべてにまたがる研究分野です。こうした多分野の人々を惹きつける試みとして、
        a(href='https://liveprog.org') LIVE
        | 、
        a(href='http://programming-experience.org') PX
        | 、
        a(href='https://sigpx.org') SIGPX
        | といった集まりがあります。
      - }
  .ui.basic.right.aligned.segment
    a.ui.primary.button(href='https://2017.splashcon.org/event/live-2017-keynote-a')
      | #{en ? 'LIVE 2017 Website' : 'LIVE 2017 Webサイト'}
      i.chevron.circle.right.icon

mixin further-readings()
  h2.ui.header
    i.lab.icon
    .content #{en ? 'Relevant projects' : '関連プロジェクト'}
  .ui.basic.segment
    - if (en) {
    p The following projects implement or discuss Live Programming experiences.
    - } else {
    p ライブプログラミング体験を実装したり議論したりしているプロジェクトが表示されています。
    - }
    .ui.segment: .ui.divided.items.projects
      - for (const p of projects) {
      //- skip concept, committee, and private projects
      - if (p.category === 'concept' || p.category === 'committee' || p.category === 'private') continue;
      //- 
      - if (!Array.isArray(p.tags) || p.tags.indexOf('live-programming') < 0) continue;
      +render-project-item(p)
      - }

mixin revisions()
  h2.ui.header
    i.announcement.icon
    | #{en ? 'Revision history' : '更新履歴'}
  .ui.basic.segment: .ui.divided.feed
    block news
      - if (!en) {
      .event: .content
        .date 9/28/2023
        .summary 日本ソフトウェア科学会 第40回大会 チュートリアルの概要を追加
      .event: .content
        .date 9/27/2023
        .summary LIVE 2017基調講演の内容を和訳
      - } else {
      .event: .content
        .date 9/28/2023
        .summary
          | Add introduction to the tutorial course held as part of 
          a(href='https://jssst2023.wordpress.com/tutorial') The 40th 
            abbr(title='Japan Society for Software Science and Technology') JSSST
            |  Annual Conference
          |  (content in Japanese).
      - }
      .event: .content
        .date 2/15/2018
        .summary #{en ? 'Replace "Further reading" with the list of relevant projects. Please visit each project page for further readings.' : '関連プロジェクトの一覧を公開'}
      .event: .content
        .date 1/21/2018
        .summary #{en ? 'Upload the initial prototype version.' : '初版を公開'}
