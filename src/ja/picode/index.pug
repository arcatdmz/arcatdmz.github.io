extends ../../picode/index

block lang
  - var lang = 'ja';

block message
  | Picodeは
  a(href='http://www.microsoft.com/ja-jp/ijarc/core/ifp_07_j_result.aspx') Microsoft Research CORE 7 プログラム
  | の支援を受けて始まり、
  a(href=`${basePath}phybots`) Phybots
  | を利用して開発され、現在は
  a(href='http://github.com/arcatdmz/picode') GitHub
  | でソースコードが公開されているオープンソースプロジェクトです。

block abstract
  p プログラムのソースコードは、大抵の場合、文字や記号表現を用いて記述するものである。このような表現は、論理的な処理の精確な記述に適している一方で、画像や多関節ロボットの姿勢情報など、具体的なデータセットを分かりやすく見せることができない。この問題は、実世界の人やロボットの姿勢情報を扱うプログラミングで顕著である。
  p そこで我々は、人やロボットの姿勢データを写真と紐づけ、ソースコード中に写真を貼り込める統合開発環境Picode (旧名Roboko)を試作した。まず、写真と紐づけられた姿勢データを第一級オブジェクトとして扱う拡張を既存の文字言語に施した。次に、姿勢データを引数に取るAPIライブラリを提供した。そして、エディタに写真を貼り付けられるような開発環境を実装した。

block overview
  p 本研究では、姿勢情報を用いるプログラミングのワークフローを支援するため、写真を貼りこめるよう拡張したエディタを含む文字ベースの統合開発環境(IDE)に、姿勢情報と写真の記録および紐づけを自然に行える例示インタフェースと、記録した写真を閲覧できる"Pose library"を追加した。このIDEを用いたプログラミングは、人やロボットの姿勢情報を写真とともにキャプチャする例示から始まる。そして、写真をエディタにドラッグ＆ドロップしたり文字を入力したりすることでソースコードを書き上げ、プログラムを実行する。ソースコードはキャプチャした写真と姿勢情報のデータセットと共に再配布できる。
  p 例えば、Picodeを用いると以下のようなプログラムを書ける。サポートされている主なAPIについては後述する。(
    a(href=`${rootPath}picode/docs/?com/phybots/picode/api/package-summary.html`) Javadoc
    | )
  dl
    dt: a(href=`${rootPath}picode/xylophone/`) 鉄琴演奏ロボ
    dd かえるの歌を演奏する。
    dt: a(href=`${rootPath}picode/hello/`) 挙手でスライド送り
    dd 右手を挙げるとスライドを次に送り、左手を挙げると一つ前に戻す。
    dt: a(href=`${rootPath}picode/flag/`) 旗揚げゲーム
    dd 画面に出てくるキャラクターと同じほうの手を素早く挙げると高得点。

block api
  dl
    dt <strong>Pose</strong> Robot.getPose()
    dd 現在の姿勢を返す
    dt <strong>float</strong> Pose.distance(Pose pose)
    dd 二つの姿勢間の差異を返す [0.0-1.0]
    dt <strong>boolean</strong> Pose.eq(Pose pose, float threshold)
    dd 二つの姿勢が同じとみなせるかどうか返す (二つの姿勢間の差異がthresholdより小さいかどうか返す)
    dt <strong>boolean</strong> Robot.setPose(Pose pose)
    dd ロボットの姿勢を指定する
    dt <strong>Action</strong> Robot.action()
    dd ロボットの姿勢の推移を表すActionオブジェクトを返す
    dt <strong>Action</strong> Action.pose(Pose pose)
    dd このActionの最後に指定した姿勢への推移を追加する
    dt <strong>Action</strong> Action.stay(int ms)
    dd このActionの最後に指定した時間のまま静止するようにする
    dt <strong>ActionResult</strong> Action.play()
    dd Actionを再生する

block extra
  .ui.hidden.divider
  section#vision
    h2.ui.header 未来ビジョン
    .ui.basic.segment
      p &quot;Programmers are people, too.&quot; という言葉がある。この、プログラマだって人である、という言葉には、プログラマがいかに分かりづらい言語を理解し、使いづらい開発環境と格闘してきたか、プログラマと一般人の溝がいかに深いか、という現状認識が現れているように思われる。
      p
        | しかし私は、プログラマと一般人の溝が近年急速に埋まりつつあるように感じている。まず、開発環境を整えるのが簡単になった。以前なら必要なファイルを揃えてパスを通して、と大変な手間だったものが、今はブラウザを開くだけでよい。プログラミングの学習も
        a(href='http://www.khanacademy.org/cs') Kahn Academy
        | などでインタラクティブに進められる。また、プログラミングできる対象が身近になってきた。
        a(href='http://www.legoeducation.jp/mindstorms/') LEGO Mindstorms NXT
        | のように実世界で動くものはもちろん、例えばスマートフォン上でスマートフォン用のプログラムを書いたり(
        a(href=`${basePath}touchdevelop/`) TouchDevelop
        | )、Webサービス同士をif-thenルールで連携させたり(
        a(href='http://ifttt.com/') IFTTT
        | )できる。家電製品がネットワークに繋がるようになってきたから、これらを遠隔制御する実用的なプログラムも簡単に書けるようになるだろう。
      p また、プログラミング言語の研究者コミュニティでは、言語だけでなく開発環境まで含めたプログラマの体験を重視する研究が増えてきている。我々のコミュニティで道具としてのUIから体験としてのHCIに研究の主流がシフトしたように、言語、ライブラリ、開発環境を個々に評価するのではなく、全体のワークフローを重視する流れが生まれている。
      p 我々は、このような追い風を受けながら &quot;People are programmers.&quot; の世界を実現していきたいと考えている。
