extends ../../touchdevelop/index

block lang
  - var lang = 'ja';

block message
  | この論文で提案されているLive Programmingの技術は、すでに現行のTouchDevelopに実装されています。
  a(href='#demo') 技術デモ
  | をお試しください！

block abstract
  p Live Programmingは、プログラムを走らせたままコードを編集し、その変更を直ちに反映させて変化を観察することを可能にする技術である。このように、伝統的な編集、コンパイル、実行というサイクルを圧縮することで、プログラムのコードと振る舞いの間を行ったり来たりする認知的なギャップを小さくできる。そうすることで、プログラミング初学者がよりよくプログラミングを学べるようになり、経験者ならば生産性を向上できることが期待される。しかしながら、Model-Viewなどの切り分けがはっきりせず抽象化の足りない命令型言語でLive Programmingを実現しようとすると、応答性が悪くなったりフィードバックが分かりにくくなったりして困難が伴う。
  p 本論文では、ユーザインタフェースを伴う一般的なプログラムの実装において、次のようにLive Programmingを実現する。すなわち、ユーザインタフェースのレンダリングを行う部分とそれ以外を綺麗に分けることによって、コードに変更があるたびに、プログラム自体を再起動せずともレンダリングだけをやりなおすことができるようにする。さらに、型(と副作用)システムを用いて、この切り分けを形式化し、コード変更時の処理手順を与える評価モデルを与える。このように、Live Programmingに対してより形式的な基盤を与えることで、Live Programmingシステムに関する本質的で技術的な議論を可能にしたい。
  p
    | 本研究は、Microsoft Research Redmond
    a(href='http://research.microsoft.com/rise/', title='Research in Software Engineering Group') RiSE Group
    | の
    a(href='http://research.microsoft.com/touchdevelop/') TouchDevelopチーム
    | における3か月のインターンの成果物である。
    a(href='http://research.microsoft.com/people/sburckha/') Sebastian Burckhardt
    | と
    a(href='http://research.microsoft.com/people/moskal/') Michał Moskal
    | がメンターであった。Microsoft Research Asiaの
    a(href='https://scholar.google.com/citations?user=EFCqkUsAAAAJ&hl=en') Sean McDirmid
    | とも連絡を取り、MSRの2つのキャンパス間の協力体制を築いて研究を進めた。

block extra
  .ui.hidden.divider
  h2.ui.header#demo 技術デモ
  .ui.basic.segment
    p 本研究で扱っている技術によるLive Programmingを体験してみたい方は
      a(href='https://www.touchdevelop.com/rthv') TouchDevelop Web Appの当該機能を利用しているスクリプト
      | を開いてみてください。
      a(href='https://www.touchdevelop.com/docs/pages-and-boxes') 公式ドキュメント
      | もあります。
    p なお、本機能は
      code page
      | を使ったときだけ有効化されます。TouchDevelopには何でもpostできる
      code wall
      | というレガシーなコンセプトがありますが、
      code page
      | はその後継として、互換性を捨てて定義されています。
    .ui.segment
      ol
        li
          a(href='http://touchdevelop.com') TouchDevelop
          | にログインする。
        li
          a(href='https://www.touchdevelop.com/rthv') リンク先
          | のヘッダにある「
          strong edit in TouchDevelop
          | 」からスクリプトを開く。
        li
          | 「
          strong run
          | 」ボタンでスクリプトを実行する。
        li
          | 適当なところで画面右上の「
          strong 一時停止
          | 」ボタンをクリック(またはタップ)すると、イベントハンドラが全て無効化されて「
          strong 編集モード
          | 」になる。
        li
          | 画面上で「
          strong box
          | 」と呼ばれる任意のGUIコンポーネントをクリックすると選択でき、隣に「
          strong edit
          | 」ボタンが現れる。
        li 「
          strong edit
          | 」をクリックすると、コードエディタの当該boxを表示する処理に飛ぶ。
      .ui.divider
      ul
        li
          | コードエディタの左隣には画面の縮小表示「
          strong Live view
          | 」が表示される。(WindowBuilderやXAMLエディタなどでよくある
          strong pre
          | viewでないことに注意)コードを編集するとLive viewに即座に反映される。
        li クリックで選択したものの他に現在アクティブな行から生成されるboxがあれば(例えばforループや関数内のbox)、赤い枠線でハイライトされる。
        li ソフトウェアキーボードにはboxの書式プロパティが並ぶ。どれかクリックすると、既にプロパティを指定している行があればそこに飛ぶ。なければ新しいプロパティ指定文が適当な位置に挿入される。
      .ui.divider
      ol(start='7')
        li
          | コード編集に満足したら「
          strong 再開
          | 」ボタンをクリックするとプログラムが再開される。
