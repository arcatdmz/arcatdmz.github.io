extends ../../pressing/index

block lang
  - var lang = 'ja';

block abstract
  p 我々は、テキストが表す精確な情報に打鍵力というファジィな情報を加えることによって新しいインタラクションを実現できると考え、統合開発環境“Pressing”を開発した。Pressingは、物理シミュレーションによる視覚的フィードバックがあり、打鍵の強さが出力に影響を与えるインタプリタを内蔵した統合開発環境である。
  p
    | 本研究は
    a(href='http://www.microsoft.com/appliedsciences/') Microsoft Applied Science Group
    | の
    a(href='http://www.youtube.com/watch?v=1zo0kJ_wi80') 打鍵圧を検出できるキーボードのプロトタイプ
    | を用いて開発された。UIST 2009 
    a(href='https://www.acm.org/uist/uist2009/call/contest.html') Student Innovation Contest
    | で
    a(href=`${rootPath}publications/uist2009-kato-pressing-flyer.pdf`)
      i.icon-file
      | フライヤー
    | を配りながら発表したのが初出である。

block px
  p Pressingを起動すると、仮想環境“Hakoniwa”とインタプリタ“Kotosaka”の入力欄が表れる。Kotosakaにスクリプトを入力すると、各文字を打鍵した強さの情報が保持され、スクリプトの実行時にHakoniwaで打鍵力に応じた出力が得られる。スクリプトの入力と実行は対話的に行われ、コンパイルによりプログラムの状態がリセットされることもない。Pressingは、いわゆるライブプログラミング環境である。
  p
    | 例えば 
    code new Ball()
    |  と打ち込んでEnterキーを押すと、スクリーン上に円が現れる。このとき 
    i Ball
    |  の打鍵が強ければ大きな円が、弱ければ小さな物体が現れる。
  p
    | 他にもいくつか面白いプリセットクラスが用意されている。例えば、次の2文は円インスタンスを変数 
    i b
    |  に代入し、円が通った軌跡が赤いブラシで塗られる。ブラシの幅は 
    i Brush
    |  がどれだけ強く打鍵されたかによって決まる。
  pre b = new Ball(); b.pen(new Brush(255,0,0));
  p プログラマは、インスタンス化した円オブジェクトとコードを書くことによってインタラクションできる。
  pre World.setGravity(0, 0.98); b.setSpeed(100);
  p しかし、単にマウスカーソルでスクリーン上のオブジェクトに触るだけでもインタラクションできる。本環境は2次元物理シミュレーションのエンジンを内蔵しているため、インスタンス化された物体との自然なインタラクションが可能である。

block implementation
  p Hakoniwaは
    a(href='http://box2d.org/') Box2D
    | ベースの物理シミュレータであり、以下の図に示すようなインタラクションを可能にしている。
  p Kotosakaは、JavaScriptに影響を受けた簡易言語を解釈する。この言語には、クラス（メソッド、フィールド）、関数、変数といったオブジェクト指向の基本的な概念が備わっている。変数は宣言不要で動的な型付けができ、プリミティブ型（真偽値、数値と文字列）の値、クラスのインスタンスと関数を代入できる。
